name: üçé TestFlight Deployment

on:
  push:
    branches:
      - main
      - master
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Custom build number (optional)'
        required: false
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  FLUTTER_VERSION: '3.32.1'
  XCODE_VERSION: '15.2'

jobs:
  testflight-deploy:
    name: üöÄ Deploy to TestFlight
    runs-on: macos-14
    timeout-minutes: 60

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}

      - name: üì¶ Flutter Doctor
        run: |
          flutter doctor -v
          flutter --version

      - name: üîë Validate Required Secrets
        run: |
          echo "üîç Validating GitHub secrets..."
          
          # Check if all required secrets exist
          if [ -z "${{ secrets.APPLE_API_PRIVATE_KEY }}" ]; then
            echo "‚ùå APPLE_API_PRIVATE_KEY secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.API_KEY_ID }}" ]; then
            echo "‚ùå API_KEY_ID secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.ISSUER_ID }}" ]; then
            echo "‚ùå ISSUER_ID secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.APP_ID }}" ]; then
            echo "‚ùå APP_ID secret is missing"
            exit 1
          fi
          
          echo "‚úÖ All required secrets are present"
          
          # Display key information (masked)
          echo "üìã Configuration:"
          echo "API Key ID: ${{ secrets.API_KEY_ID }}"
          echo "Issuer ID: ${{ secrets.ISSUER_ID }}"
          echo "App ID: ${{ secrets.APP_ID }}"

      - name: üì± Verify iOS Project Structure
        run: |
          echo "üîç Verifying Flutter iOS project structure..."

          echo "üçé Installing iOS dependencies..."
          cd ios
          pod install --repo-update
          cd ..
          
          if [ ! -d "ios" ]; then
            echo "‚ùå iOS directory not found. This doesn't appear to be a Flutter project."
            exit 1
          fi
          
          if [ ! -f "ios/Runner.xcworkspace" ] && [ ! -f "ios/Runner.xcodeproj" ]; then
            echo "‚ùå No iOS workspace or project found"
            exit 1
          fi
          
          if [ ! -f "ios/Runner/Info.plist" ]; then
            echo "‚ùå Info.plist not found"
            exit 1
          fi
          
          # Check bundle identifier
          BUNDLE_ID=$(plutil -extract CFBundleIdentifier raw ios/Runner/Info.plist 2>/dev/null || echo "unknown")
          echo "üì± Bundle ID: $BUNDLE_ID"
          
          if [ "$BUNDLE_ID" != "${{ secrets.APP_ID }}" ]; then
            echo "‚ö†Ô∏è  Bundle ID mismatch:"
            echo "   Info.plist: $BUNDLE_ID"
            echo "   APP_ID secret: ${{ secrets.APP_ID }}"
            echo "   This might cause signing issues"
          else
            echo "‚úÖ Bundle ID matches APP_ID secret"
          fi
          
          echo "‚úÖ iOS project structure looks good"

      - name: üîê Setup Apple API Key
        run: |
          echo "üîê Setting up Apple API authentication..."
          
          # Create private_keys directory
          mkdir -p private_keys
          
          # Create the .p8 file with proper formatting
          echo "${{ secrets.APPLE_API_PRIVATE_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
          
          # Verify the file was created
          if [ ! -f "private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8" ]; then
            echo "‚ùå Failed to create .p8 file"
            exit 1
          fi
          
          # Check file size (should be reasonable, not tiny)
          FILE_SIZE=$(wc -c < private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8)
          echo "üìä .p8 file size: ${FILE_SIZE} bytes"
          
          if [ "$FILE_SIZE" -lt 200 ]; then
            echo "‚ùå .p8 file appears to be too small (${FILE_SIZE} bytes)"
            echo "   Expected: 450-600 bytes for a valid key"
            echo "   This suggests the APPLE_API_PRIVATE_KEY secret might be truncated"
            exit 1
          fi
          
          # Verify file format
          if ! grep -q "^-----BEGIN PRIVATE KEY-----$" private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8; then
            echo "‚ö†Ô∏è  .p8 file missing proper BEGIN marker, attempting to fix..."
            
            # Try to fix malformed file
            echo "-----BEGIN PRIVATE KEY-----" > temp_file
            grep -v "BEGIN\|END" private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8 | tr -d '\n' | fold -w 64 >> temp_file
            echo "-----END PRIVATE KEY-----" >> temp_file
            mv temp_file private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
            
            echo "üîß Applied automatic formatting fix"
          fi
          
          if ! grep -q "^-----END PRIVATE KEY-----$" private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8; then
            echo "‚ùå .p8 file missing proper END marker"
            echo "   First line: $(head -n1 private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8)"
            echo "   Last line:  $(tail -n1 private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8)"
            exit 1
          fi
          
          # Validate with OpenSSL
          if command -v openssl >/dev/null 2>&1; then
            if openssl pkey -in private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8 -noout 2>/dev/null; then
              echo "‚úÖ .p8 file validation passed"
            else
              echo "‚ùå .p8 file failed OpenSSL validation"
              echo "   This indicates the private key format is invalid"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  OpenSSL not available for validation"
          fi
          
          # Set secure permissions
          chmod 600 private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
          
          echo "‚úÖ Apple API key setup complete"

      - name: üì¶ Install Dependencies
        run: |
          echo "üì¶ Installing Flutter dependencies..."
          flutter pub get
          
          
          echo "‚úÖ Dependencies installed successfully"

      - name: üßπ Clean Project
        run: |
          echo "üßπ Cleaning Flutter project..."
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project cleaned successfully"

      - name: üîß Prepare Build Environment
        run: |
          echo "üîß Preparing build environment..."
          
          # Determine build number
          if [ -n "${{ github.event.inputs.build_number }}" ]; then
            BUILD_NUMBER="${{ github.event.inputs.build_number }}"
            echo "üì± Using custom build number: $BUILD_NUMBER"
          else
            # Generate build number from timestamp and run number
            BUILD_NUMBER="$(date +%Y%m%d).${GITHUB_RUN_NUMBER}"
            echo "üì± Generated build number: $BUILD_NUMBER"
          fi
          
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          
          # Set version name
          VERSION_NAME=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "üì± Version name: $VERSION_NAME"
          
          echo "‚úÖ Build environment prepared"

      - name: üèóÔ∏è Build iOS App
        run: |
          echo "üèóÔ∏è Building iOS app..."
          
          # Build the iOS app with release configuration
          flutter build ios \
            --release \
            --no-codesign \
            --build-number="$BUILD_NUMBER" \
            --build-name="$VERSION_NAME"
          
          echo "‚úÖ iOS app built successfully"

      - name: üì± Archive and Export IPA
        run: |
          echo "üì± Creating iOS archive..."
          
          # Set up authentication parameters
          AUTH_KEY_PATH="$PWD/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8"
          
          # Archive the app
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTH_KEY_PATH" \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ISSUER_ID }}" \
            clean archive
          
          echo "‚úÖ Archive created successfully"
          
          echo "üì§ Exporting IPA for App Store..."
          
          # Create export options plist
          cat > build/ios/archive/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>TEAM_ID_PLACEHOLDER</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
          </dict>
          </plist>
          EOF
          
          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist build/ios/archive/ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTH_KEY_PATH" \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ISSUER_ID }}"
          
          echo "‚úÖ IPA exported successfully"

      - name: üöÄ Upload to TestFlight
        run: |
          echo "üöÄ Uploading to TestFlight..."
          
          # Find the IPA file
          IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
          
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA file found in build/ios/ipa"
            ls -la build/ios/ipa/
            exit 1
          fi
          
          echo "üì± IPA file: $IPA_PATH"
          
          # Upload to TestFlight using altool
          xcrun altool \
            --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "${{ secrets.API_KEY_ID }}" \
            --apiIssuer "${{ secrets.ISSUER_ID }}" \
            --verbose
          
          echo "‚úÖ Upload to TestFlight completed!"
          
          echo "üéâ Build Information:"
          echo "   App: ${{ secrets.APP_ID }}"
          echo "   Version: $VERSION_NAME"
          echo "   Build: $BUILD_NUMBER"
          echo "   Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo ""
          echo "üì± Check your build in App Store Connect:"
          echo "   https://appstoreconnect.apple.com/apps/${{ secrets.APP_ID }}/testflight"

      - name: üìä Build Summary
        if: always()
        run: |
          echo "üìä Build Summary"
          echo "==============="
          echo "Status: ${{ job.status }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo ""
          echo "üì± App Information:"
          echo "Bundle ID: ${{ secrets.APP_ID }}"
          echo "Version: ${VERSION_NAME:-'unknown'}"
          echo "Build: ${BUILD_NUMBER:-'unknown'}"
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment completed successfully!"
            echo "   Your app is now processing in TestFlight"
            echo "   It should be available for testing within 10-30 minutes"
          else
            echo "‚ùå Deployment failed"
            echo "   Please check the logs above for specific error messages"
            echo "   Common issues:"
            echo "   - Invalid .p8 file format"
            echo "   - Bundle ID mismatch"
            echo "   - Missing App Store Connect app"
            echo "   - Insufficient API key permissions"
          fi

      - name: üßπ Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up sensitive files..."
          rm -rf private_keys/
          rm -f build/ios/archive/ExportOptions.plist
          echo "‚úÖ Cleanup completed"