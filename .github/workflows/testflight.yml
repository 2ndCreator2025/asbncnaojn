name: üöÄ TestFlight iOS Deploy

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Custom build number (optional)'
        required: false
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  FLUTTER_VERSION: '3.24.3' # Adjust as needed
  XCODE_VERSION: '15.2'    # Adjust as needed

jobs:
  testflight-deploy:
    name: Build & Upload to TestFlight
    runs-on: macos-14
    timeout-minutes: 60

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: üê¶ Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
          cache-key: flutter-${{ env.FLUTTER_VERSION }}

      - name: üîé Run Flutter Doctor
        run: flutter doctor -v

      - name: üîë Validate & Prepare Apple API Key
        run: |
          # Check for essential secrets
          if [ -z "${{ secrets.APPLE_API_PRIVATE_KEY }}" ] || \
             [ -z "${{ secrets.API_KEY_ID }}" ] || \
             [ -z "${{ secrets.ISSUER_ID }}" ] || \
             [ -z "${{ secrets.APP_ID }}" ]; then
            echo "‚ùå One or more required secrets are missing. Please check your repository secrets."
            exit 1
          fi
          echo "‚úÖ All required secrets are present."

          # Create private_keys directory and .p8 file
          mkdir -p private_keys
          # Convert \n to actual newlines and create the key file
          echo "${{ secrets.APPLE_API_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
          chmod 600 private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
          
          # Verify the key file format
          if head -1 private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8 | grep -q "BEGIN PRIVATE KEY"; then
            echo "‚úÖ Apple API key file created and verified."
          else
            echo "‚ùå Invalid API key format. Please check your private key."
            cat private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
            exit 1
          fi

      - name: üì¶ Install Flutter & iOS Dependencies
        run: |
          flutter pub get
          cd ios && pod install --repo-update && cd ..
          echo "‚úÖ Dependencies installed."

      - name: üßπ Clean & Prepare Build
        run: |
          flutter clean
          flutter pub get
          # Determine build number (custom input or timestamp.run_number)
          BUILD_NUMBER="${{ github.event.inputs.build_number || format('{0}.{1}', github.run_number, github.run_attempt) }}"
          VERSION_NAME=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
          echo "üì± Building app version: ${VERSION_NAME} (Build: ${BUILD_NUMBER})"
          echo "‚úÖ Build environment prepared."

      - name: üèóÔ∏è Build iOS Archive
        run: |
          flutter build ios --release --no-codesign \
            --build-number="$BUILD_NUMBER" \
            --build-name="$VERSION_NAME"

          AUTH_KEY_PATH="$PWD/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8"

          # Archive the app
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            -destination 'generic/platform=iOS' \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTH_KEY_PATH" \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ISSUER_ID }}" \
            clean archive
          echo "‚úÖ iOS app archived successfully."

      - name: üéØ Generate JWT Token & Get Team ID
        run: |
          cd cli
          dart pub get
          cd ..
          
          # Generate JWT token using Dart CLI
          JWT=$(dart run ./cli/bin/cli.dart "${{ secrets.API_KEY_ID }}" "${{ secrets.ISSUER_ID }}" "private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8")
          echo "JWT_TOKEN=${JWT}" >> $GITHUB_ENV
          
          # Get Team ID from App Store Connect API
          TEAM_RESPONSE=$(curl -s -H "Authorization: Bearer ${JWT}" "https://api.appstoreconnect.apple.com/v1/bundleIds")
          TEAM_ID=$(echo "${TEAM_RESPONSE}" | jq -r '.data[0].attributes.seedId')
          echo "TEAM_ID=${TEAM_ID}" >> $GITHUB_ENV
          
          echo "Successfully fetched Team ID: ${TEAM_ID}"

      - name: üì§ Export IPA
        run: |
          AUTH_KEY_PATH="$PWD/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8"

          # Create export options plist
          cat > build/ios/archive/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <false/>
              <key>manageAppVersionAndBuildNumber</key>
              <false/>
          </dict>
          </plist>
          EOF

          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist build/ios/archive/ExportOptions.plist \
            -allowProvisioningUpdates \
            -authenticationKeyPath "$AUTH_KEY_PATH" \
            -authenticationKeyID "${{ secrets.API_KEY_ID }}" \
            -authenticationKeyIssuerID "${{ secrets.ISSUER_ID }}"
          echo "‚úÖ IPA exported successfully."

      - name: üöÄ Upload to TestFlight
        run: |
          IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA file found for upload."
            exit 1
          fi
          echo "üì± Found IPA: $IPA_PATH"

          xcrun altool \
            --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "${{ secrets.API_KEY_ID }}" \
            --apiIssuer "${{ secrets.ISSUER_ID }}" \
            --verbose
          echo "üéâ Upload to TestFlight completed! Check App Store Connect for processing: https://appstoreconnect.apple.com/apps/${{ secrets.APP_ID }}/testflight"

      - name: üßπ Clean up Sensitive Files
        if: always()
        run: |
          echo "üßπ Cleaning up sensitive files..."
          rm -rf private_keys/
          rm -f build/ios/archive/ExportOptions.plist
          echo "‚úÖ Cleanup complete."